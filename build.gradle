/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'abalak' at '06/03/19 16:08' with Gradle 2.8
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.8/userguide/tutorial_java_projects.html
 */

/* General Description
// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.12'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}
*/


/*
    * https://stackoverflow.com/questions/17773817/purpose-of-buildscript-block-in-gradle
    * You must use a buildScript block because Gradle needs this information in order to understand the rest of the build script.
    * That's why you have to provide this information in a separate channel (the buildScript block).
    * Technically speaking, Gradle needs this information in order to compile and evaluate the rest of the build script.
    * What happens under the hood is that Gradle separates the build script into two scripts (the buildScript block and everything else)
    * so that it can process them separately.
*/
buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
    }
/*
*   The Spring Boot Gradle Plugin provides Spring Boot support in Gradle,
*   allowing you to package executable jar or war archives, run Spring Boot applications,
*   and use the dependency management provided by spring-boot-dependencies.
*   The Spring Boot gradle plugin provides many convenient features:
*
*   It collects all the jars on the classpath and builds a single, runnable "über-jar",
*   which makes it more convenient to execute and transport your service.
*
*   It searches for the public static void main() method to flag as a runnable class.
*
*   It provides a built-in dependency resolver that sets the version number to match Spring Boot dependencies.
*   You can override any version you wish, but it will default to Boot’s chosen set of versions.
*/
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.3.RELEASE")
    }
}



/* The allprojects block is used to add configuration items
 *that will apply to all sub-projects as well as the root project.
 */

allprojects {
/*
 * Java plugin: Adds Java compilation, testing, and bundling capabilities to a project.
 * It serves as the basis for many of the other Gradle plugins.
*/
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
        maven { url 'https://repo.spring.io/snapshot' }
        maven { url 'https://repo.spring.io/milestone' }
        gradlePluginPortal()
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok:1.18.6'
    }
}

/*
 * Similar to allprojects block, the subprojects block can be used to add configurations items for all sub-projects only
 * You can use these two blocks as many times as you want in the root project.
 *
 * The below line will set the version for each of the modules which you will be adding, via the subproject block
 * <more on this versioning thing later>
 */

/*
 * All about plugins:
 * https://www.tutorialspoint.com/gradle/gradle_plugins.htm
 */
subprojects {
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    version = '1.0'
}


